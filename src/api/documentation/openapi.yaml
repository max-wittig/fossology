# this is an example of the Uber API
# as a demonstration of an API spec in YAML
swagger: '2.0'
info:
  title: FOSSology API
  description: Automate your fossology instance using this API
  version: "1.0.0"
# the domain of the service
host: localhost
# array of all schemes that your API supports
schemes:
  - https
# will be prefixed to all paths
basePath: /v1
securityDefinitions:
  UserSecurity:
    type: basic
security:
  - UserSecurity: []
  
produces:
  - application/json
paths:
  /organize/uploads/{id}:
    get:
      tags:
        - Upload
        - Organize
      summary: Get single upload by id
      description:
        Returns an array with single upload
      parameters:
        - name: id
          required: true
          in: path
          type: number
          format: int
      responses:
        200:
          description: Get upload
          schema:
            type: array
            items:
              $ref: '#/definitions/Upload'
        400:
          description: Bad request, id NaN etc.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to upload
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Upload
        - Organize
      summary: Delete upload by id
      parameters:
        - name: id
          required: true
          in: path
          type: number
          format: int
      responses:
        202:
          description: Upload will be deleted
    patch:
      tags:
        - Upload
        - Organize
      parameters:
        - name: id
          description: uploadid
          in: path
          required: true
          type: number
        - name: folder_id
          description: folder, where upload is located
          in: header
          required: false
          type: string
      responses:
        202:
          description: Upload will be moved
    put:
      tags:
        - Upload
        - Organize
      description: Can be used to copy uploads
      parameters:
        - name: id
          description: uploadid
          in: path
          required: true
          type: number
      responses:
        202:
          description: Upload will be copied

  /organize/uploads:
    get:
      tags:
        - Upload
      summary: Uploads
      description: |
        The uploads endpoint returns all uploads
      responses:
        200:
          description: An array of uploads
          schema:
            type: array
            items:
              $ref: '#/definitions/Upload'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to upload
          schema:
            $ref: '#/definitions/Error'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

  /organize/folders:
    get:
      tags:
        - Organize
      summary: Get all folders
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Folder'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to job
          schema:
            $ref: '#/definitions/Error'

  /organize/folders/{id}:
    delete:
      tags:
        - Organize
        - Folder
      summary: Delete a folder with id
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int
      responses:
        202:
          description: Job will be scheduled
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to job
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
    get:
      tags:
        - Organize
        - Folder
      summary: Get information about folder
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int
      responses:
        200:
          description: Returns folder object in array
          schema:
            type: array
            items:
              $ref: '#/definitions/Folder'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to folder
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - Organize
        - Folder
      summary: Change information about folder
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int
        - name: name
          in: header
          required: false
          type: string
        - name: description
          in: header
          required: false
          type: string
        - name: folder_id
          description: folder, where folder is located
          in: header
          required: false
          type: string
      responses:
        204:
          description: Information changed
        400:
          description: Bad request, name or header need to be required
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to folder
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'

  /organize/licenses/:
    get:
      tags:
        - Organize
        - License
      responses:
        200:
          description: Return all licenses
          schema:
            type: array
            items:
              $ref: '#/definitions/License'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - Organize
        - License
      parameters:
        - name: shortname
          in: header
          required: true
          type: string
        - name: fullname
          in: header
          required: true
          type: string
        - name: text
          in: header
          required: true
          type: string
        - name: url
          in: header
          required: true
          type: string
        - name: merge_request
          in: header
          required: true
          type: string
      responses:
        201:
          description: Created OK
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to add licenses
          schema:
            $ref: '#/definitions/Error'

  /organize/licenses/{id}:
    get:
      tags:
        - Organize
        - License
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int
      responses:
        200:
          description: Return all licenses
          schema:
            type: array
            items:
              $ref: '#/definitions/License'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        404:
          description: License id not found
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - Organize
        - License
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int
        - name: shortname
          in: header
          required: false
          type: string
        - name: fullname
          in: header
          required: false
          type: string
        - name: text
          in: header
          required: false
          type: string
        - name: url
          in: header
          required: false
          type: string
        - name: merge_request
          in: header
          required: false
          type: string
      responses:
        204:
          description: OK, No Content returned
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to patch license
          schema:
            $ref: '#/definitions/Error'
        404:
          description: License id not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - Organize
        - License
      parameters:
        - name: id
          in: path
          required: true
          type: number
          format: int
      responses:
        204:
          description: OK
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to delete license
          schema:
            $ref: '#/definitions/Error'
        404:
          description: License id not found
          schema:
            $ref: '#/definitions/Error'

  /upload/file:
    put:
      tags:
        - Upload
      summary: Upload file
      parameters:
        - name: filename
          required: true
          in: header
          type: string
        - name: folder_id
          # use Software Repository, if no folder_id provided
          required: false
          in: header
          type: number
          format: int
        - name: visibility
          required: false
          type: string
          in: header
          enum:
            - active_group
            - all_groups
            - public
        - name: scan_options
          required: false
          in: body
          schema:
            $ref: '#/definitions/ScanOptions'
        - name: enhanced_reuse_id
          description: Reuse upload id
          required: false
          type: number
          in: header
      responses:
        201:
          description: Created OK
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, not allowed to upload
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'

  /upload/server:
    post:
      tags:
        - Upload
      summary: Upload file from server
      description: This option permits uploading files from the server.
      parameters:
      - name: folder_id
        # use Software Repository, if no folder_id provided
        required: false
        in: header
        type: number
        format: int
      - name: file_path
        required: true
        in: header
        type: string
      - name: description
        in: header
        type: string
      - name: visibility
        # use default visiblity, if not provided
        enum:
          - active_group
          - all_groups
          - public
        required: false
        in: header
        type: string
      - name: scan_options
        required: false
        in: body
        schema:
          $ref: '#/definitions/ScanOptions'
      responses:
        202:
          description: Accepted (Download from server started)
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, not allowed to upload
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'

  /upload/version-control/{type}:
    post:
      tags:
      - Upload
      parameters:
        - name: type
          in: path
          required: true
          type: string
          enum:
            - git
            - svn
        - name: folder_id
          in: header
          required: true
          type: number
          format: int
        - name: url
          in: header
          required: true
          type: string
          description: URL of the repo
        - name: username
          in: header
          required: false
          type: string
        - name: password
          in: header
          required: false
          type: string
        - name: name
          in: header
          required: false
          type: string
          description: viewable name for file/directory
        - name: description
          in: header
          required: false
          type: string
        - name: visibility
          required: true
          type: string
          in: header
          enum:
            - active_group
            - all_groups
            - public
        - name: scan_options
          required: false
          in: body
          schema:
            $ref: '#/definitions/ScanOptions'
      responses:
        202:
          description: Accepted, will be uploaded
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, not allowed to upload
          schema:
            $ref: '#/definitions/Error'

  /upload/url:
    post:
      tags:
      - Upload
      parameters:
        - name: url
          required: true
          in: header
          type: string
          description: URL to the file or directory
        - name: name
          required: false
          in: header
          type: string
          description: viewable name for this file or directory
        - name: accept_pattern
          required: false
          in: header
          type: string
          description:  comma-separated lists of file name suffixes or patterns to accept
        - name: reject_pattern
          required: false
          in: header
          type: string
          description: comma-separated lists of file name suffixes or patterns to reject
        - name: max_recursion_depth
          required: false
          in: header
          type: number
          format: int
          description: maximum recursion depth (0 for infinite)
        - name: description
          required: false
          in: header
          type: string
          description: description of this file
        - name: visibility
          required: true
          type: string
          in: header
          enum:
            - active_group
            - all_groups
            - public
        - name: scan_options
          required: false
          in: body
          schema:
            $ref: '#/definitions/ScanOptions'
      responses:
        202:
          description: Accepted (Download starting)
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, not allowed to upload
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'

  /jobs:
    get:
      tags:
      - Job
      summary: Gets all jobs
      description: Returns all jobs with their status
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Job'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to jobs
          schema:
            $ref: '#/definitions/Error'

  /search:
    get:
      tags:
        - Search
      parameters:
        - name: limit
          # use default, if not given
          required: false
          description: Limit search to
          in: header
          type: string
          enum:
            - containers_incl_dir
            - containers_excl_dir
            - all
        - name: filename
          description: Filename to find
          required: false
          in: header
          type: string
        - name: tag
          description: Tag to find
          required: false
          in: header
          type: string
        - name: filesize_min
          description: Min filesize in bytes
          required: false
          in: header
          type: number
        - name: filesize_max
          description: Max filesize in bytes
          required: false
          in: header
          type: number
        - name: license
          description: License search filter
          required: false
          in: header
          type: string
        - name: copyright
          description: Copyright search filter
          required: false
          in: header
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Upload'
        400:
          description: Bad request, at least 1 parameter must be provider for search
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'

  /jobs/{id}:
    get:
      tags:
      - Job
      summary: Get single job
      description: Returns single job in an array
      parameters:
        - name: id
          in: path
          required: true
          type: number
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Job'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to job
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'

  /jobs/schedule:
    post:
      tags:
        - Job
      summary: Schedule an Analysis
      description:  Schedule an Analysis of an existing upload
      parameters:
        # This could also be omitted, because there are no real folders
        - name: folder_id
          in: header
          required: true
          type: number
          format: int
        - name: upload_id
          in: header
          required: true
          type: number
          format: int
        - name: scan_options
          required: true
          in: body
          schema:
            $ref: '#/definitions/ScanOptions'
      responses:
        204:
          description: Job Scheduled
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to job
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'

  /admin/users:
    get:
      tags:
        - User
        - Admin
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to all users
          schema:
            $ref: '#/definitions/Error'
    put:
      tags:
        - User
        - Admin
      parameters:
        - name: name
          type: string
          required: true
          in: header
          description: username
        - name: description
          type: string
          required: false
          in: header
          description: description of the user
        - name: email
          type: string
          required: true
          in: header
          description: email of the user, needs to be unique and is required
        - name: access
          type: string
          required: true
          in: header
          enum:
            - none
            - read_only
            - read_write
            - admin
        - name: root_folder_id
          required: false
          in: header
          type: number
          format: int
          description: root folder id of the user
        - name: password
          required: false
          in: header
          type: string
          description: password of the user. This will be null, if not needed
        - name: email_notification
          required: false
          in: header
          type: boolean
          description: enable email notification when upload scan completes
        - name: agents
          required: false
          in: body
          schema:
            $ref: '#/definitions/Analysis'
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Bad request, missing parameters etc.
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to user
          schema:
            $ref: '#/definitions/Error'

  /admin/users/{id}:
    get:
      tags:
        - User
        - Admin
      parameters:
        - name: id
          type: number
          required: true
          in: path
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to user
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
    patch:
      tags:
        - User
        - Admin
      parameters:
        - name: id
          type: number
          required: true
          in: path
        - name: name
          type: string
          required: false
          in: header
          description: username
        - name: description
          type: string
          required: false
          in: header
          description: description of the user
        - name: email
          type: string
          required: false
          in: header
          description: email of the user, needs to be unique and is required
        - name: access
          type: string
          required: false
          in: header
          enum:
            - none
            - read_only
            - read_write
            - admin
        - name: root_folder_id
          required: false
          in: header
          type: number
          format: int
          description: root folder id of the user
        - name: password
          required: false
          in: header
          type: string
          description: password of the user. This will be null, if not needed
        - name: email_notification
          required: false
          in: header
          type: boolean
          description: enable email notification when upload scan completes
        - name: agents
          required: false
          in: body
          schema:
            $ref: '#/definitions/Analysis'
      responses:
        204:
          description: OK
        400:
          description: Bad request, one modification needs to be executed
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to user
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'
    delete:
      tags:
        - User
        - Admin
      parameters:
        - name: id
          type: number
          required: true
          in: path
      responses:
        202:
          description: Accepted, user deletion will be scheduled
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        401:
          description: Unauthorized, no authentification provided
          schema:
            $ref: '#/definitions/Error'
        403:
          description: Forbidden, no access to user
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Not found
          schema:
            $ref: '#/definitions/Error'

definitions:
  License:
    type: object
    properties:
      license_id:
        type: number
        format: int
      shortname:
        type: string
      fullname:
        type: string
      text:
        type: string
      url:
        type: string
      merge_request:
        type: boolean
  Job:
    type: object
    properties:
      job_id:
        type: number
        format: int
      status:
        type: string
      filename:
        type: string
      eta:
        type: string
  Upload:
    type: object
    properties:
      in_folder_id:
        type: number
        format: int
        description: The folder id, where the upload is located
      upload_id:
        type: number
        format: int
        description: Upload id of the upload.
      description:
        type: string
        description: Description of the upload.
      upload_name:
        type: string
        description: Display name of the upload.
      upload_date:
        type: string
        description: Date, when the file was uploaded.
      file_size:
        type: number
        description: Filesize in Bytes.
  LicenseDecider:
    type: object
    properties:
      nomos_monk:
        type: boolean
        description: Scanners matches if all Nomos findings are within the Monk findings.
      bulk_reused:
        type: boolean
        description: Bulk phrases from reused packages.
      new_scanner:
        type: boolean
        description: New scanner results, i.e., decisions were marked as work in progress if new scanner finds additional licenses.
  Analysis:
    type: object
    properties:
      bucket:
        type: boolean
        description: Should bucket analysis be run on this upload
      copyright_email_author:
        type: boolean
        description: Should Copyright/Email/URL/Author Analysis be run on this upload.
      ecc:
        type: boolean
        description: Should ECC Analysis be run on this upload.
      ip:
        type: boolean
        description: Should IP Analysis be run on this upload.
      keyword:
        type: boolean
        description: Should keyword Analysis be run on this upload.
      mime:
        type: boolean
        description: Should MIME Analysis be run on this upload.
      monk:
        type: boolean
        description: Should Monk Analysis be run on this upload.
      nomos:
        type: boolean
        description: Should Nomos Analysis be run on this upload.
      package:
        type: boolean
        description: Should Package Analysis be run on this upload.
  ScanOptions:
    type: object
    properties:
      analysis:
        $ref: '#/definitions/Analysis'
      decider:
        $ref: '#/definitions/LicenseDecider'
      reuse:
        type: number
        format: int
  Folder:
    type: object
    properties:
      id:
        type: string
        description: id of the folder
      name:
        type: string
        description: name of the folder
      description:
        type: string
        description: description of the folder
  User:
    type: object
    properties:
      id:
        type: string
        description: id of the user
      name:
        type: string
        description: username
      description:
        type: string
        description: description of the user
      email:
        type: string
        description: email of the user, needs to be unique and is required
      access:
        type: string
        enum:
          - none
          - read_only
          - read_write
          - admin
      root_folder_id:
        type: number
        format: int
        description: root folder id of the user
      password:
        type: string
        description: password of the user. This will be null, if not needed
      email_notification:
        type: boolean
        description: enable email notification when upload scan completes
      agents:
        $ref: '#/definitions/Analysis'
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string

